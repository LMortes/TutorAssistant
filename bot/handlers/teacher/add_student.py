import random
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from bot.loader import dp, bot
from bot.keyboards import inline as ikb
from bot.utils.mysql import db
from bot.utils.states.add_student_state import AddStudent


async def get_info_student(state):
    data = await state.get_data()
    student_info = {
        'user_id': data.get('user_id'),
        'name': data.get('name'),
        'subject': data.get('subject'),
        'registration_date': data.get('registration_date'),
        'class_student': data.get('class_student'),
        'purpose': data.get('purpose'),
        'price': data.get('price'),
        'transfer': data.get('transfer'),
        'phone': data.get('phone'),
        'platform': data.get('platform'),
        'platform_nick': data.get('platform_nick'),
        'timezone': data.get('timezone'),
        'teacher_id': data.get('teacher_id'),
    }
    return student_info


async def generate_info_student_message(student_info):
    pre_message = '‚öôÔ∏è –¢—ã –≤–æ—à–µ–ª –≤ —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞' \
                  '\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–µ–Ω–∏–∫–µ' \
                  '\n\nüî¥ –ö—Ä–∞—Å–Ω—ã–º –∫—Ä—É–∂–∫–æ–º –ø–æ–º–µ—á–µ–Ω—ã –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ –∂–µ–ª–∞–Ω–∏—é' \
                  '\n\n‚òëÔ∏è –ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–∞–∂–º–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –∏ —É—á–µ–Ω–∏–∫ –∑–∞–ø–∏—à–µ—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n' \
                  '‚úñÔ∏è –ï—Å–ª–∏ –Ω–∞–¥–æ –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"\n\n'
    info_message = f'{pre_message}–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–µ–Ω–∏–∫–µ:\n\n' \
                   f'üÜî ID —É—á–µ–Ω–∏–∫–∞: {"-" if student_info["user_id"] is None else student_info["user_id"]}\n' \
                   f'üë¶ –ò–º—è —É—á–µ–Ω–∏–∫–∞: {"-" if student_info["name"] is None else student_info["name"]}\n' \
                   f'üìö –ü—Ä–µ–¥–º–µ—Ç: {"-" if student_info["subject"] is None else student_info["subject"]}\n' \
                   f'üî¢ –ö–ª–∞—Å—Å: {"-" if student_info["class_student"] is None else student_info["class_student"]}\n' \
                   f'üéØ –¶–µ–ª—å –∑–∞–Ω—è—Ç–∏–π: {"-" if student_info["purpose"] is None else student_info["purpose"]}\n' \
                   f'üíµ –¶–µ–Ω–∞ —É—Ä–æ–∫–∞ –≤ —á–∞—Å: {"-" if student_info["price"] is None else student_info["price"]}\n' \
                   f'üë® –§–ò–û —á–µ–ª–æ–≤–µ–∫–∞ –æ—Ç –∫–æ–≥–æ –ø–æ—Å—Ç—É–ø–∞—é—Ç –¥–µ–Ω—å–≥–∏: {"-" if student_info["transfer"] is None else student_info["transfer"]}\n' \
                   f'üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {"-" if student_info["phone"] is None else student_info["phone"]}\n' \
                   f'üîó –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {"-" if student_info["platform"] is None else student_info["platform"]}\n' \
                   f'üì© –ù–∏–∫ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: {"-" if student_info["platform_nick"] is None else student_info["platform_nick"]}\n' \
                   f'üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {student_info["timezone"]}'
    return info_message


async def delete_and_edit_message_add_student(message, state):
    # –î–æ–±—ã–≤–∞–µ–º –∏–¥ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    main_message_id = (await state.get_data()).get('main_message_id')
    callback_message_id = (await state.get_data()).get('callback_message_id')
    student_info = await get_info_student(state)
    info_message = await generate_info_student_message(student_info)
    await message.delete()
    await bot.delete_message(message.chat.id, callback_message_id)
    await bot.edit_message_text(chat_id=message.chat.id, message_id=main_message_id, text=f'{info_message}',
                                reply_markup=await ikb.generate_keyboard_add_student(student_info))
    await state.set_state(AddStudent.add_student_state)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É—á–µ–Ω–∏–∫–∞


# ------------------------------ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ -----------------------------------
@dp.message_handler(Text('‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞'))
async def add_student_handler(message: types.Message, state: FSMContext):
    await state.set_state(AddStudent.add_student_state)
    await state.update_data(timezone='+0', teacher_id=message.from_user.id,
                            transfer=None, phone=None, platform=None, platform_nick=None, user_id=None)
    student_info = await get_info_student(state)
    info_message = await generate_info_student_message(student_info)
    main_message = await message.answer(f'{info_message}',
                                        reply_markup=await ikb.generate_keyboard_add_student(student_info))
    main_message_id = main_message.message_id
    await state.update_data(main_message_id=main_message_id)


@dp.callback_query_handler(lambda callback: callback.data == 'close_option', state=['*'])
async def close_option_add_student_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.set_state(AddStudent.add_student_state)
    return await callback.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')


@dp.message_handler(state=AddStudent.add_student_id)
async def check_id_student(message: types.Message, state: FSMContext):
    answer = message.text
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    try:
        student_id = int(answer)
    except:
        await message.delete()
        return await message.answer('‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.')
    if int(student_id) < 0:
        await message.delete()
        return await message.answer('‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.')

    student_id_exists = await db.get_student_info(student_id)
    if student_id_exists != False:
        await message.delete()
        return await message.answer('‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –£—á–µ–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await state.update_data(user_id=student_id)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω—è–µ–º –≥–ª–∞–≤–Ω–æ–µ.
    return await delete_and_edit_message_add_student(message, state)


@dp.message_handler(state=AddStudent.add_student_name)
async def check_id_student(message: types.Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω—è–µ–º –≥–ª–∞–≤–Ω–æ–µ.
    return await delete_and_edit_message_add_student(message, state)


@dp.message_handler(state=AddStudent.add_student_subject)
async def check_id_student(message: types.Message, state: FSMContext):
    subject = message.text
    await state.update_data(subject=subject)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω—è–µ–º –≥–ª–∞–≤–Ω–æ–µ.
    return await delete_and_edit_message_add_student(message, state)


@dp.callback_query_handler(lambda callback: callback.data.startswith('select_class_student_'),
                           state=AddStudent.add_student_class)
async def check_id_student(callback: types.CallbackQuery, state: FSMContext):
    class_student = callback.data[21:]
    await state.update_data(class_student=class_student)

    # –î–æ–±—ã–≤–∞–µ–º –∏–¥ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    main_message_id = (await state.get_data()).get('main_message_id')
    callback_message_id = (await state.get_data()).get('callback_message_id')
    student_info = await get_info_student(state)
    info_message = await generate_info_student_message(student_info)
    await bot.delete_message(callback.message.chat.id, callback_message_id)
    await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=main_message_id, text=f'{info_message}', \
                                reply_markup=await ikb.generate_keyboard_add_student(student_info))
    await state.set_state(AddStudent.add_student_state)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É—á–µ–Ω–∏–∫–∞


@dp.message_handler(state=AddStudent.add_student_purpose)
async def check_id_student(message: types.Message, state: FSMContext):
    purpose = message.text
    await state.update_data(purpose=purpose)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω—è–µ–º –≥–ª–∞–≤–Ω–æ–µ.
    return await delete_and_edit_message_add_student(message, state)


@dp.message_handler(state=AddStudent.add_student_price)
async def check_id_student(message: types.Message, state: FSMContext):
    price = message.text
    try:
        validate_price = int(price)
    except:
        await message.delete()
        return await message.answer('‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –¶–µ–Ω–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.')
    if int(price) < 0:
        await message.delete()
        return await message.answer('‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –¶–µ–Ω–Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.')
    await state.update_data(price=validate_price)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω—è–µ–º –≥–ª–∞–≤–Ω–æ–µ.
    return await delete_and_edit_message_add_student(message, state)


@dp.message_handler(state=AddStudent.add_student_transfer)
async def check_id_student(message: types.Message, state: FSMContext):
    transfer = message.text
    await state.update_data(transfer=transfer)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω—è–µ–º –≥–ª–∞–≤–Ω–æ–µ.
    return await delete_and_edit_message_add_student(message, state)


@dp.message_handler(state=AddStudent.add_student_phone)
async def check_id_student(message: types.Message, state: FSMContext):
    phone = message.text
    await state.update_data(phone=phone)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω—è–µ–º –≥–ª–∞–≤–Ω–æ–µ.
    return await delete_and_edit_message_add_student(message, state)


@dp.message_handler(state=AddStudent.add_student_platform)
async def check_id_student(message: types.Message, state: FSMContext):
    platform = message.text
    await state.update_data(platform=platform)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω—è–µ–º –≥–ª–∞–≤–Ω–æ–µ.
    return await delete_and_edit_message_add_student(message, state)


@dp.message_handler(state=AddStudent.add_student_platform_nick)
async def check_id_student(message: types.Message, state: FSMContext):
    platform_nick = message.text
    await state.update_data(platform_nick=platform_nick)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω—è–µ–º –≥–ª–∞–≤–Ω–æ–µ.
    return await delete_and_edit_message_add_student(message, state)


@dp.message_handler(state=AddStudent.add_student_timezone)
async def check_id_student(message: types.Message, state: FSMContext):
    timezone = message.text
    if (timezone == '0' or timezone == '+0'):
        return await message.delete()
    if not timezone.startswith('+'):
        await message.delete()
        return await message.answer(
            '‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–ª—é—Å –ø–µ—Ä–µ–¥ —á–∏—Å–ª–æ–º, –∏–ª–∏ –¥—Ä—É–≥–∞—è —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.')
    await state.update_data(timezone=timezone)

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω—è–µ–º –≥–ª–∞–≤–Ω–æ–µ.
    return await delete_and_edit_message_add_student(message, state)


@dp.callback_query_handler(lambda callback: callback.data.startswith('add_student_'),
                           state=AddStudent.add_student_state)
async def add_student_callback(callback: types.CallbackQuery, state: FSMContext):
    message_callback = callback.data[12:]

    if message_callback == 'id':
        await state.set_state(AddStudent.add_student_id)
        callback_message = await callback.message.answer(
            '–ù–∞–ø–∏—à–∏ ID —É—á–µ–Ω–∏–∫–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ. –£–∑–Ω–∞—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–≤ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç–∞ - @username_to_id_bot.\n'
            '–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —É—á–µ–Ω–∏–∫–∞ —á—Ç–æ–±—ã –æ–Ω –Ω–∞–ø–∏—Å–∞–ª –≤ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–±–µ —Å–≤–æ–π ID\n\n'
            '–ï—Å–ª–∏ —É—á–µ–Ω–∏–∫–∞ –Ω–µ—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∏ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –∫ —Å–µ–±–µ, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–æ–¥–∏',
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='close_option')
                ],
            ]))
        callback_message_id = callback_message.message_id
        await state.update_data(callback_message_id=callback_message_id)
        return await callback.answer()

    elif message_callback == 'name':
        await state.set_state(AddStudent.add_student_name)
        callback_message = await callback.message.answer('–ù–∞–ø–∏—à–∏ –∏–º—è —É—á–µ–Ω–∏–∫–∞ –∏–ª–∏ –§–ò–û, –Ω–∞ —Ç–≤–æ–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.',
                                                         reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                                                             [
                                                                 types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞',
                                                                                            callback_data='close_option')
                                                             ],
                                                         ]))
        callback_message_id = callback_message.message_id
        await state.update_data(callback_message_id=callback_message_id)
        return await callback.answer()
    elif message_callback == 'subject':
        await state.set_state(AddStudent.add_student_subject)
        callback_message = await callback.message.answer(
            '–ù–∞–ø–∏—à–∏ –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—à—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç—å —É—á–µ–Ω–∏–∫—É, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ, –Ω–∞–ø–∏—à–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä: (–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –†—É—Å—Å–∫–∏–π)',
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='close_option')
                ],
            ]))
        callback_message_id = callback_message.message_id
        await state.update_data(callback_message_id=callback_message_id)
        return await callback.answer()
    elif message_callback == 'class':
        await state.set_state(AddStudent.add_student_class)
        callback_message = await callback.message.answer('–£–∫–∞–∂–∏ –≤ –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ —É—á–∏—Ç—Å—è —Ç–≤–æ–π —É—á–µ–Ω–∏–∫.',
                                                         reply_markup=await ikb.select_class_student_keyboard())
        callback_message_id = callback_message.message_id
        await state.update_data(callback_message_id=callback_message_id)
        return await callback.answer()
    elif message_callback == 'purpose':
        await state.set_state(AddStudent.add_student_purpose)
        callback_message = await callback.message.answer('–ù–∞–ø–∏—à–∏ —Ü–µ–ª—å –∑–∞–Ω—è—Ç–∏–π —Å —É—á–µ–Ω–∏–∫–æ–º –∏–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –ø–æ–º–µ—Ç–∫–∏.',
                                                         reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                                                             [
                                                                 types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞',
                                                                                            callback_data='close_option')
                                                             ],
                                                         ]))
        callback_message_id = callback_message.message_id
        await state.update_data(callback_message_id=callback_message_id)
        return await callback.answer()
    elif message_callback == 'price':
        await state.set_state(AddStudent.add_student_price)
        callback_message = await callback.message.answer('–ù–∞–ø–∏—à–∏ —Ü–µ–Ω—É —É—Ä–æ–∫–∞ –≤ —Ä—É–±–ª—è—Ö –∑–∞ —á–∞—Å.\n'
                                                         '–ï—Å–ª–∏ –≤—Ä–µ–º—è —É—Ä–æ–∫–∞ –¥—Ä—É–≥–æ–µ, —Ç–æ –≤–æ –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –±–æ—Ç —Å–∞–º —Ä–∞—Å—á–∏—Ç–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Ä–æ–∫–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏—à—å —É–∫–∞–∑–∞—Ç—å —ç—Ç–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö',
                                                         reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                                                             [
                                                                 types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞',
                                                                                            callback_data='close_option')
                                                             ],
                                                         ]))
        callback_message_id = callback_message.message_id
        await state.update_data(callback_message_id=callback_message_id)
        return await callback.answer()
    elif message_callback == 'transfer':
        await state.set_state(AddStudent.add_student_transfer)
        callback_message = await callback.message.answer(
            '–ù–∞–ø–∏—à–∏ –∏–º—è –∏–ª–∏ –§–ò–û —á–µ–ª–æ–≤–µ–∫–∞ –æ—Ç –∫–æ–≥–æ –ø–æ—Å—Ç—É–ø–∞—é—Ç –¥–µ–Ω—å–≥–∏ –∑–∞ —É—Ä–æ–∫.\n'
            '–≠—Ç–æ—Ç –ø—É–Ω–∫—Ç –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ –∂–µ–ª–∞–Ω–∏—é.',
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='close_option')
                ],
            ]))
        callback_message_id = callback_message.message_id
        await state.update_data(callback_message_id=callback_message_id)
        return await callback.answer()
    elif message_callback == 'phone':
        await state.set_state(AddStudent.add_student_phone)
        callback_message = await callback.message.answer(
            '–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—á–µ–Ω–∏–∫–∞ –∏–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—è —É—á–µ–Ω–∏–∫–∞ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n'
            '–ï—Å–ª–∏ –Ω–∞–¥ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤, —Ç–æ —Ä–∞–∑–¥–µ–ª–∏ –∏—Ö –ø—Ä–æ–±–µ–ª–æ–º.\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä: (89009009090 89009009090)',
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='close_option')
                ],
            ]))
        callback_message_id = callback_message.message_id
        await state.update_data(callback_message_id=callback_message_id)
        return await callback.answer()
    elif message_callback == 'platform':
        await state.set_state(AddStudent.add_student_platform)
        callback_message = await callback.message.answer('–ù–∞–ø–∏—à–∏ –Ω–∞ –∫–∞–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —Ç—ã –≤–µ–¥–µ—à—å –∑–∞–Ω—è—Ç–∏—è —Å —É—á–µ–Ω–∏–∫–æ–º.',
                                                         reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                                                             [
                                                                 types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞',
                                                                                            callback_data='close_option')
                                                             ],
                                                         ]))
        callback_message_id = callback_message.message_id
        await state.update_data(callback_message_id=callback_message_id)
        return await callback.answer()
    elif message_callback == 'platform_nick':
        await state.set_state(AddStudent.add_student_platform_nick)
        callback_message = await callback.message.answer(
            '–ù–∞–ø–∏—à–∏ –Ω–∏–∫ —É—á–µ–Ω–∏–∫–∞ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è —Å –Ω–∏–º.',
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='close_option')
                ],
            ]))
        callback_message_id = callback_message.message_id
        await state.update_data(callback_message_id=callback_message_id)
        return await callback.answer()
    elif message_callback == 'timezone':
        await state.set_state(AddStudent.add_student_timezone)
        callback_message = await callback.message.answer(
            '–ù–∞–ø–∏—à–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—á–µ–Ω–∏–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ú–æ—Å–∫–≤—ã. –ù–∞–ø—Ä–∏–º–µ—Ä (+3 –∏–ª–∏ -2)\n'
            '–ï—Å–ª–∏ —É–∫–∞–∑–∞—Ç—å 0 –∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å, –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é +0 (–º—Å–∫)',
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='close_option')
                ],
            ]))
        callback_message_id = callback_message.message_id
        await state.update_data(callback_message_id=callback_message_id)
        return await callback.answer()
    elif message_callback == 'close':
        await callback.message.delete()
        await callback.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
        return await state.finish()

    elif message_callback == 'continue':
        info_students = await get_info_student(state)
        if (info_students["name"] is not None) \
                and (info_students["subject"] is not None) \
                and (info_students["class_student"] is not None) \
                and (info_students["purpose"] is not None) \
                and (info_students["price"] is not None) \
                and (info_students["platform"] is not None):
            await callback.message.delete()
            await callback.message.answer('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä–Ω–æ –ª–∏ –≤—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–µ–Ω–∏–∫–µ.\n\n'
                                          f'{(await generate_info_student_message(info_students))[332:]}', reply_markup=ikb.ikb_confirm_add_student)
            return await callback.answer()
        else:
            return await callback.answer('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –Ω–µ –±—ã–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.')


@dp.callback_query_handler(lambda callback: callback.data.startswith('confirm_add_student_'), state=AddStudent.add_student_state)
async def confirm_add_student_callback(callback: types.CallbackQuery, state: FSMContext):
    if callback.data[20:] == 'accept':
        info_student = await state.get_data()
        student_id = info_student["user_id"]
        # –ï—Å–ª–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –≤–≤–µ–ª id —É—á–µ–Ω–∏–∫–∞, —Ç–æ –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–π id —É—á–µ–Ω–∏–∫–∞
        if student_id == None:
            random_student_id_exists = True
            while random_student_id_exists != False:
                random_student_id = random.randint(1000, 9999)
                random_student_id_exists = await db.get_student_info(random_student_id)
            info_student["user_id"] = random_student_id

        is_add_student = await db.add_new_student(info_student)
        if is_add_student:
            await callback.message.delete()
            await state.finish()
            return await callback.message.answer('ü•≥ –£—á–µ–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.')
        else:
            await callback.message.delete()
            await state.finish()
            return await callback.message.answer('üôÅ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–µ–Ω–∏–∫–∞ –≤ –±–∞–∑—É. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –í–∞–º. (id —É—á–µ–Ω–∏–∫–∞ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ)')
    elif callback.data[20:] == 'cancel':
        await state.finish()
        return await callback.message.delete()
