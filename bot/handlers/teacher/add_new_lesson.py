import re

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from bot.bin.russian_weekdays import russian_weekday
from bot.keyboards import inline as ikb
from bot.loader import dp, bot
from bot.utils.mysql import db
from bot.utils.other.generate_schedule_current_student import generate_schedule_current_student
from bot.utils.other.parse_registration_date import parse_registration_date
from bot.utils.states.add_lesson_state import AddLesson


async def get_info_lesson(state):
    data = await state.get_data()
    lesson_info = {
        'week_day': data.get('week_day'),
        'lesson_time': data.get('lesson_time'),
    }
    return lesson_info

async def generate_info_student_message(lesson_info, student_id=None):
    schedule_current_student = ''
    if student_id is not None:
        lesson_dates = await db.get_lesson_dates_current_student(student_id)

        if lesson_dates != False:
            schedule_current_student = await generate_schedule_current_student(lesson_dates)  # –ü–æ–ª—É—á–∏–º —É–∂–µ –∏–º–µ—é—â–µ–µ—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞

    current_schedule_message = ''
    if len(schedule_current_student) != 0:
        current_schedule_message = f'–£ —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ —É–∂–µ –µ—Å—Ç—å —Ä–∞—Å–Ω–∏—Å–∞–Ω–∏–µ:\n{schedule_current_student}'


    pre_message = '‚öôÔ∏è –¢—ã –≤–æ—à–µ–ª –≤ —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–∞' \
                  '\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ' \
                  '\n\nüî¥ –ö—Ä–∞—Å–Ω—ã–º –∫—Ä—É–∂–∫–æ–º –ø–æ–º–µ—á–µ–Ω—ã –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ –∂–µ–ª–∞–Ω–∏—é' \
                  '\n\n‚òëÔ∏è –ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è, –Ω–∞–∂–º–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–æ –∫–æ–Ω—Ü–∞ –≥–æ–¥–∞ –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –¥–µ–Ω—å\n\n'\
                   f'{current_schedule_message}'

    info_message = (f'{pre_message}–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–∫–µ:\n\n'
                    f'üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {"-" if lesson_info["week_day"] is None else lesson_info["week_day"]}\n'
                    f'üïí –í—Ä–µ–º—è (–º—Å–∫): {"-" if lesson_info["lesson_time"] is None else lesson_info["lesson_time"]}')
    return info_message



@dp.callback_query_handler(lambda callback: callback.data.startswith('add_new_lesson_'))
async def add_new_lesson_to_student_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    student_id = callback.data[15:]
    teacher_id = callback.from_user.id

    await state.set_state(AddLesson.add_lesson_state)
    await state.update_data(student_id=student_id, teacher_id=teacher_id, week_day=None, lesson_time=None)
    lesson_info = await get_info_lesson(state)
    info_message = await generate_info_student_message(lesson_info, student_id)
    main_message = await callback.message.answer(f'{info_message}',
                                        reply_markup=await ikb.generate_keyboard_add_lesson(lesson_info))
    main_message_id = main_message.message_id
    await state.update_data(main_message_id=main_message_id)



@dp.callback_query_handler(lambda callback: callback.data == 'add_lesson_close_option', state=['*'])
async def close_option_add_lesson_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.set_state(AddLesson.add_lesson_state)
    return await callback.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')



@dp.callback_query_handler(lambda callback: callback.data.startswith('add_week_day_'),
                           state=AddLesson.add_week_day)
async def add_week_day_callback(callback: types.CallbackQuery, state: FSMContext):
    week_day = callback.data[13:]
    week_day_text = ''
    if week_day == 'first':
        week_day_text = '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
        week_day = 0
    elif week_day == 'second':
        week_day_text = '–í—Ç–æ—Ä–Ω–∏–∫'
        week_day = 1
    elif week_day == 'third':
        week_day_text = '–°—Ä–µ–¥–∞'
        week_day = 2
    elif week_day == 'fourth':
        week_day_text = '–ß–µ—Ç–≤–µ—Ä–≥'
        week_day = 3
    elif week_day == 'fifth':
        week_day_text = '–ü—è—Ç–Ω–∏—Ü–∞'
        week_day = 4
    elif week_day == 'sixth':
        week_day_text = '–°—É–±–±–æ—Ç–∞'
        week_day = 5
    elif week_day == 'seventh':
        week_day_text = '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        week_day = 6


    await state.update_data(week_day=week_day_text, week_day_info=week_day)

    # –î–æ–±—ã–≤–∞–µ–º –∏–¥ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    main_message_id = (await state.get_data()).get('main_message_id')
    callback_message_id = (await state.get_data()).get('callback_message_id')
    lesson_info = await get_info_lesson(state)
    info_message = await generate_info_student_message(lesson_info)
    await bot.delete_message(callback.message.chat.id, callback_message_id)
    await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=main_message_id, text=f'{info_message}', \
                                reply_markup=await ikb.generate_keyboard_add_lesson(lesson_info))
    await state.set_state(AddLesson.add_lesson_state)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É—Ä–æ–∫–∞


@dp.message_handler(state=AddLesson.add_lesson_time)
async def add_lesson_time_handler(message: types.Message, state: FSMContext):
    time_pattern = re.compile(r'^([01]\d|2[0-3]):([0-5]\d)$')

    if time_pattern.match(message.text):
        lesson_hour = (message.text.split(':'))[0]
        lesson_minute = (message.text.split(':'))[1]

        lesson_time = f'{lesson_hour}:{lesson_minute}'
        await state.update_data(lesson_time=lesson_time)

        # –î–æ–±—ã–≤–∞–µ–º –∏–¥ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        main_message_id = (await state.get_data()).get('main_message_id')
        callback_message_id = (await state.get_data()).get('callback_message_id')
        lesson_info = await get_info_lesson(state)
        info_message = await generate_info_student_message(lesson_info)
        await bot.delete_message(message.chat.id, callback_message_id)
        await bot.edit_message_text(chat_id=message.chat.id, message_id=main_message_id,
                                    text=f'{info_message}',
                                    reply_markup=await ikb.generate_keyboard_add_lesson(lesson_info))
        await state.set_state(AddLesson.add_lesson_state)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É—Ä–æ–∫–∞
    else:
        return await message.answer('‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≥–æ —Å–æ–±–ª—é–¥–∞—è —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞.')



@dp.callback_query_handler(lambda callback: callback.data.startswith('add_lesson_'),
                           state=AddLesson.add_lesson_state)
async def add_lesson_callback(callback: types.CallbackQuery, state: FSMContext):
    message_callback = callback.data[11:]

    if message_callback == 'week_day':
        await state.set_state(AddLesson.add_week_day)
        callback_message = await callback.message.answer(
            '–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —É—Ä–æ–∫ —Å —É—á–µ–Ω–∏–∫–æ–º:',
            reply_markup=await ikb.select_week_day_for_lesson())
        callback_message_id = callback_message.message_id
        await state.update_data(callback_message_id=callback_message_id)
        return await callback.answer()
    elif message_callback == 'lesson_time':
        await state.set_state(AddLesson.add_lesson_time)
        callback_message = await callback.message.answer(
            '‚è≥ –ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è –≤ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —É—Ä–æ–∫ —Å —É—á–µ–Ω–∏–∫–æ–º\n\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä:\n'
            '02:35\n'
            '16:00\n'
            '00:20')
        callback_message_id = callback_message.message_id
        await state.update_data(callback_message_id=callback_message_id)
        return await callback.answer()
    elif message_callback == 'close':
        await callback.message.delete()
        await callback.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
        return await state.finish()
    elif message_callback == 'continue':
        lesson_info = await get_info_lesson(state)
        if ((lesson_info["week_day"] is not None) and (lesson_info["lesson_time"] is not None)):
            wait_message = await callback.message.answer('‚è≥ –ü—Ä–æ—Ü–µ–¥—É—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ.')
            data = await state.get_data()
            await db.generate_lessons_for_weekday(data.get("teacher_id"), data.get("student_id"),
                                                  data.get("week_day_info"), data.get("lesson_time"))
            await callback.message.delete()
            await bot.delete_message(callback.message.chat.id, wait_message.message_id)
            await callback.message.answer(
                f'‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {data.get("week_day")} –≤ {data.get("lesson_time")} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.')
            await state.reset_data()
            await state.finish()
            return await callback.answer()
        else:
            return await callback.answer('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –Ω–µ –±—ã–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.')


